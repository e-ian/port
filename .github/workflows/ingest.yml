name: Ingest YouTube Playlist

on:
  workflow_dispatch:
    inputs:
      playlist_id:
        description: "Youtube video playlist id"
        required: true
      port_context:
        description: "The port context"
        required: true
  push:
    branches:
      - ft-youtube-ingestion

jobs:
  authenticate:
    runs-on: ubuntu-latest
    outputs:
      port_token: ${{ steps.get_token.outputs.token }}
    steps:
      - name: Get Port Token
        id: get_token
        run: |
          if [ -n "${{ secrets.PORT_CLIENT_ID }}" ] && [ -n "${{ secrets.PORT_CLIENT_SECRET }}" ]; then
            TOKEN=$(curl -X POST "https://api.getport.io/v1/auth/access_token" \
              -H "Content-Type: application/json" \
              -d '{
                "clientId": "${{ secrets.PORT_CLIENT_ID }}",
                "clientSecret": "${{ secrets.PORT_CLIENT_SECRET }}"
              }' | jq -r '.accessToken')
          else
            TOKEN="${{ secrets.PORT_API_KEY }}"
          fi
          echo "token=${TOKEN}" >> "$GITHUB_OUTPUT"

  fetch-playlist:
    needs: authenticate
    runs-on: ubuntu-latest
    steps:
      - name: Get and Process Playlist Info
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          PLAYLIST_ID: ${{ github.event.inputs.playlist_id }}
          PORT_TOKEN: ${{ needs.authenticate.outputs.port_token }}
        run: |
          # Fetch playlist data
          RESPONSE=$(curl -s "https://youtube.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails&id=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}")
          
          # Extract required fields using jq
          TITLE=$(echo $RESPONSE | jq -r '.items[0].snippet.title')
          DESC=$(echo $RESPONSE | jq -r '.items[0].snippet.description | @json')
          THUMB=$(echo $RESPONSE | jq -r '.items[0].snippet.thumbnails.default.url')
          COUNT=$(echo $RESPONSE | jq -r '.items[0].contentDetails.itemCount')
          
          # Create/Update playlist entity
          curl -X POST "https://api.getport.io/v1/blueprints/playlist/entities" \
            -H "Authorization: Bearer ${PORT_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "{
              \"identifier\": \"${PLAYLIST_ID}\",
              \"properties\": {
                \"title\": \"${TITLE}\",
                \"description\": ${DESC},
                \"thumbnail_url\": \"${THUMB}\",
                \"video_count\": ${COUNT}
              }
            }"

  fetch-videos:
    needs: [authenticate, fetch-playlist]
    runs-on: ubuntu-latest
    steps:
      - name: Get and Process Videos
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          PLAYLIST_ID: ${{ github.event.inputs.playlist_id }}
          PORT_TOKEN: ${{ needs.authenticate.outputs.port_token }}
        run: |
          process_video() {
            local VIDEO_ID=$1
            local VIDEO_DATA=$(curl -s "https://youtube.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=${VIDEO_ID}&key=${YOUTUBE_API_KEY}")
            
            local TITLE=$(echo $VIDEO_DATA | jq -r '.items[0].snippet.title | @json')
            local DESC=$(echo $VIDEO_DATA | jq -r '.items[0].snippet.description | @json')
            local THUMB=$(echo $VIDEO_DATA | jq -r '.items[0].snippet.thumbnails.default.url')
            local DURATION=$(echo $VIDEO_DATA | jq -r '.items[0].contentDetails.duration')
            local VIEWS=$(echo $VIDEO_DATA | jq -r '.items[0].statistics.viewCount')
            local LIKES=$(echo $VIDEO_DATA | jq -r '.items[0].statistics.likeCount')
            local COMMENTS=$(echo $VIDEO_DATA | jq -r '.items[0].statistics.commentCount')
            
            curl -X POST "https://api.getport.io/v1/blueprints/video/entities" \
              -H "Authorization: Bearer ${PORT_TOKEN}" \
              -H "Content-Type: application/json" \
              -d "{
                \"identifier\": \"${VIDEO_ID}\",
                \"properties\": {
                  \"title\": ${TITLE},
                  \"description\": ${DESC},
                  \"thumbnail_url\": \"${THUMB}\",
                  \"duration\": \"${DURATION}\",
                  \"view_count\": ${VIEWS:-0},
                  \"like_count\": ${LIKES:-0},
                  \"comment_count\": ${COMMENTS:-0}
                },
                \"relations\": {
                  \"belongs_to\": \"${PLAYLIST_ID}\"
                }
              }"
          }
          
          PAGE_TOKEN=""
          while true; do
            ENDPOINT="https://youtube.googleapis.com/youtube/v3/playlistItems?part=contentDetails&maxResults=50&playlistId=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}"
            if [ -n "$PAGE_TOKEN" ]; then
              ENDPOINT="${ENDPOINT}&pageToken=${PAGE_TOKEN}"
            fi
            
            RESPONSE=$(curl -s "$ENDPOINT")
            echo $RESPONSE | jq -r '.items[].contentDetails.videoId' | while read VIDEO_ID; do
              process_video "$VIDEO_ID"
              sleep 1
            done
            
            PAGE_TOKEN=$(echo $RESPONSE | jq -r '.nextPageToken')
            if [ "$PAGE_TOKEN" = "null" ]; then
              break
            fi
          done
