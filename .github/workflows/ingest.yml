name: Ingest YouTube Playlist

on:
  workflow_dispatch:
    inputs:
      playlist_id:
        description: "Youtube video playlist id"
        required: true
      port_context:
        description: "The port context"
        type: string
        required: true

jobs:
  create-playlist:
    runs-on: ubuntu-latest
    outputs:
      playlist_title: ${{ steps.playlist_info.outputs.title }}
      playlist_count: ${{ steps.playlist_info.outputs.count }}
    steps:
      - name: Get Port Token
        id: get_token
        env:
          PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
          PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
        run: |
          TOKEN_RESPONSE=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d "{\"clientId\": \"$PORT_CLIENT_ID\", \"clientSecret\": \"$PORT_CLIENT_SECRET\"}")
          
          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.accessToken')
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Get Playlist Info and Create Port Entity
        id: playlist_info
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          PLAYLIST_ID: ${{ github.event.inputs.playlist_id }}
          PORT_CONTEXT: ${{ inputs.port_context }}
        run: |
          # Get playlist data
          echo "Fetching playlist data"
          PLAYLIST_DATA=$(curl -s "https://youtube.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails&id=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}")
          
          if [ "$(echo $PLAYLIST_DATA | jq '.items | length')" -eq 0 ]; then
            echo "No playlist found"
            exit 1
          fi

          # Extract playlist info
          TITLE=$(echo $PLAYLIST_DATA | jq -r '.items[0].snippet.title')
          DESC=$(echo $PLAYLIST_DATA | jq -r '.items[0].snippet.description')
          THUMB=$(echo $PLAYLIST_DATA | jq -r '.items[0].snippet.thumbnails.default.url')
          COUNT=$(echo $PLAYLIST_DATA | jq -r '.items[0].contentDetails.itemCount')

          # Create playlist entity
          PLAYLIST_PAYLOAD=$(jq -n \
            --arg id "$PLAYLIST_ID" \
            --arg title "$TITLE" \
            --arg desc "$DESC" \
            --arg thumb "$THUMB" \
            --arg count "$COUNT" \
            '{
              identifier: $id,
              title: $title,
              properties: {
                title: $title,
                description: $desc,
                thumbnail_url: $thumb,
                video_count: ($count|tonumber)
              }
            }')

          echo "Creating playlist entity"
          RESPONSE=$(curl -s -X POST "https://api.getport.io/v1/blueprints/playlist/entities" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$PLAYLIST_PAYLOAD")

          # Set outputs for next job
          echo "title=$TITLE" >> $GITHUB_OUTPUT
          echo "count=$COUNT" >> $GITHUB_OUTPUT

  process-videos:
    needs: create-playlist
    runs-on: ubuntu-latest
    steps:
      - name: Get Port Token
        id: get_token
        env:
          PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
          PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
        run: |
          TOKEN_RESPONSE=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d "{\"clientId\": \"$PORT_CLIENT_ID\", \"clientSecret\": \"$PORT_CLIENT_SECRET\"}")
          
          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.accessToken')
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Process Videos
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          PLAYLIST_ID: ${{ github.event.inputs.playlist_id }}
          PORT_CONTEXT: ${{ inputs.port_context }}
          PLAYLIST_TITLE: ${{ needs.create-playlist.outputs.playlist_title }}
        run: |
          # Initialize counters
          VIDEOS_PROCESSED=0
          VIDEOS_FAILED=0
          RUN_ID=$(echo "$PORT_CONTEXT" | jq -r --raw-input 'fromjson | .runId')

          # Create video entity function
          create_video_entity() {
            local PAYLOAD=$1
            curl -s -X POST "https://api.getport.io/v1/blueprints/video/entities" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD"
          }

          # Process videos function
          process_videos() {
            local PAGE_TOKEN=$1
            local API_URL="https://youtube.googleapis.com/youtube/v3/playlistItems?part=contentDetails&maxResults=50&playlistId=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}"
            if [ -n "${PAGE_TOKEN}" ]; then
              API_URL="${API_URL}&pageToken=${PAGE_TOKEN}"
            fi

            local ITEMS_RESPONSE=$(curl -s "${API_URL}")
            echo $ITEMS_RESPONSE | jq -r '.items[].contentDetails.videoId' | while read -r VIDEO_ID; do
              echo "Processing video: ${VIDEO_ID}"
              
              VIDEO_DATA=$(curl -s "https://youtube.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=${VIDEO_ID}&key=${YOUTUBE_API_KEY}")
              
              if [ "$(echo $VIDEO_DATA | jq '.items | length')" -gt 0 ]; then
                local V_TITLE=$(echo $VIDEO_DATA | jq -r '.items[0].snippet.title')
                local V_DESC=$(echo $VIDEO_DATA | jq -r '.items[0].snippet.description')
                local V_THUMB=$(echo $VIDEO_DATA | jq -r '.items[0].snippet.thumbnails.default.url')
                local V_DURATION=$(echo $VIDEO_DATA | jq -r '.items[0].contentDetails.duration')
                local V_VIEWS=$(echo $VIDEO_DATA | jq -r '.items[0].statistics.viewCount // "0"')
                local V_LIKES=$(echo $VIDEO_DATA | jq -r '.items[0].statistics.likeCount // "0"')
                local V_COMMENTS=$(echo $VIDEO_DATA | jq -r '.items[0].statistics.commentCount // "0"')

                local VIDEO_PAYLOAD=$(jq -n \
                  --arg id "$VIDEO_ID" \
                  --arg title "$V_TITLE" \
                  --arg desc "$V_DESC" \
                  --arg thumb "$V_THUMB" \
                  --arg duration "$V_DURATION" \
                  --arg views "$V_VIEWS" \
                  --arg likes "$V_LIKES" \
                  --arg comments "$V_COMMENTS" \
                  --arg playlist_id "$PLAYLIST_ID" \
                  '{
                    identifier: $id,
                    title: $title,
                    properties: {
                      title: $title,
                      description: $desc,
                      thumbnail_url: $thumb,
                      duration: $duration,
                      view_count: ($views|tonumber),
                      like_count: ($likes|tonumber),
                      comment_count: ($comments|tonumber)
                    },
                    relations: {
                      belongs_to: $playlist_id
                    }
                  }')

                RESPONSE=$(create_video_entity "$VIDEO_PAYLOAD")
                if [ "$(echo "$RESPONSE" | jq -r '.ok // false')" = "true" ]; then
                  ((VIDEOS_PROCESSED++))
                else
                  ((VIDEOS_FAILED++))
                fi

                if [ $((VIDEOS_PROCESSED % 5)) -eq 0 ]; then
                  # Update progress
                  curl -s -X PATCH "https://api.getport.io/v1/actions/runs/$RUN_ID" \
                    -H "Authorization: Bearer $ACCESS_TOKEN" \
                    -H "Content-Type: application/json" \
                    -d "{\"status\":\"SUCCESS\",\"message\":\"Processing '$PLAYLIST_TITLE': ${VIDEOS_PROCESSED} videos completed\"}"
                fi

                sleep 1
              else
                ((VIDEOS_FAILED++))
              fi
            done

            local NEXT_PAGE=$(echo $ITEMS_RESPONSE | jq -r '.nextPageToken')
            if [ "${NEXT_PAGE}" != "null" ]; then
              process_videos "${NEXT_PAGE}"
            fi
          }

          process_videos ""
          
          # Final status update
          curl -s -X PATCH "https://api.getport.io/v1/actions/runs/$RUN_ID" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"status\":\"SUCCESS\",\"message\":\"Completed processing '$PLAYLIST_TITLE': ${VIDEOS_PROCESSED} videos processed, ${VIDEOS_FAILED} failed\"}"

      - name: Report Failure
        if: failure()
        env:
          PORT_CONTEXT: ${{ inputs.port_context }}
        run: |
          RUN_ID=$(echo "$PORT_CONTEXT" | jq -r --raw-input 'fromjson | .runId')
          
          curl -X PATCH "https://api.getport.io/v1/actions/runs/$RUN_ID" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"status":"FAILURE","message":"Workflow failed to complete"}'
