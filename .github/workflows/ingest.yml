name: Ingest YouTube Playlist

on:
  workflow_dispatch:
    inputs:
      playlist_id:
        description: "Youtube video playlist id"
        required: true
      port_context:
        description: "The port context"
        type: string
        required: true

jobs:
  get-port-token:
    runs-on: ubuntu-latest
    steps:
      - name: Get Port Token
        id: token
        env:
          PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
          PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
        run: |
          set -e
          TOKEN_RESPONSE=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d "{\"clientId\": \"$PORT_CLIENT_ID\", \"clientSecret\": \"$PORT_CLIENT_SECRET\"}")
          
          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.accessToken')
          if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" = "null" ]; then
            echo "::error::Failed to get access token"
            exit 1
          fi
          
          # Save token as secret
          echo "PORT_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

  create-playlist:
    needs: get-port-token
    runs-on: ubuntu-latest
    outputs:
      playlist_title: ${{ steps.playlist_info.outputs.title }}
      playlist_count: ${{ steps.playlist_info.outputs.count }}
    steps:
      - name: Get Playlist Info and Create Port Entity
        id: playlist_info
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          PLAYLIST_ID: ${{ github.event.inputs.playlist_id }}
          PORT_CONTEXT: ${{ inputs.port_context }}
        run: |
          set -e
          echo "::group::Fetching playlist data"
          PLAYLIST_DATA=$(curl -s "https://youtube.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails&id=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}")
          
          if [ "$(echo $PLAYLIST_DATA | jq '.items | length')" -eq 0 ]; then
            echo "::error::No playlist found"
            exit 1
          fi

          TITLE=$(echo $PLAYLIST_DATA | jq -r '.items[0].snippet.title')
          DESC=$(echo $PLAYLIST_DATA | jq -r '.items[0].snippet.description')
          THUMB=$(echo $PLAYLIST_DATA | jq -r '.items[0].snippet.thumbnails.default.url')
          COUNT=$(echo $PLAYLIST_DATA | jq -r '.items[0].contentDetails.itemCount')

          PLAYLIST_PAYLOAD=$(jq -n \
            --arg id "$PLAYLIST_ID" \
            --arg title "$TITLE" \
            --arg desc "$DESC" \
            --arg thumb "$THUMB" \
            --arg count "$COUNT" \
            '{
              identifier: $id,
              title: $title,
              properties: {
                title: $title,
                description: $desc,
                thumbnail_url: $thumb,
                video_count: ($count|tonumber)
              }
            }')

          echo "::group::Creating playlist entity"
          RESPONSE=$(curl -s -X POST "https://api.getport.io/v1/blueprints/playlist/entities" \
            -H "Authorization: Bearer $PORT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$PLAYLIST_PAYLOAD")

          if [ "$(echo "$RESPONSE" | jq -r '.ok // false')" != "true" ]; then
            echo "::error::Failed to create playlist entity: $(echo "$RESPONSE" | jq -r '.message')"
            exit 1
          fi
          echo "::endgroup::"

          echo "title=$(echo "$TITLE" | jq -R -s .)" >> $GITHUB_OUTPUT
          echo "count=$COUNT" >> $GITHUB_OUTPUT
  process-videos:
    needs: [get-port-token, create-playlist]
    runs-on: ubuntu-latest
    steps:
      - name: Process Videos
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          PLAYLIST_ID: ${{ github.event.inputs.playlist_id }}
          PORT_CONTEXT: ${{ inputs.port_context }}
          PLAYLIST_TITLE: ${{ needs.create-playlist.outputs.playlist_title }}
        run: |
          set -e
          # Extract run ID
          RUN_ID=$(echo "$PORT_CONTEXT" | jq -r --raw-input 'fromjson | .runId')
          if [ -z "$RUN_ID" ]; then
            echo "::error::Failed to get run ID from context"
            exit 1
          fi

          # Initialize counters
          echo "0" > /tmp/videos_processed
          echo "0" > /tmp/videos_failed

          # Function to add logs to the action run
          add_action_log() {
            local MESSAGE=$1
            local STATUS_LABEL=${2:-""}

            local PAYLOAD="{\"message\": \"$MESSAGE\""
            if [ -n "$STATUS_LABEL" ]; then
              PAYLOAD="$PAYLOAD, \"statusLabel\": \"$STATUS_LABEL\""
            fi
            PAYLOAD="$PAYLOAD}"

            curl -s -X POST "https://api.getport.io/v1/actions/runs/$RUN_ID/logs" \
              -H "Authorization: Bearer $PORT_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD"
          }

          # Function to update final action status only
          update_final_status() {
            local STATUS=$1
            local SUMMARY=$2
            local DETAILS=$3

            curl -s -X PATCH "https://api.getport.io/v1/actions/runs/$RUN_ID" \
              -H "Authorization: Bearer $PORT_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{
                \"status\": \"$STATUS\",
                \"message\": {
                  \"summary\": \"$SUMMARY\",
                  \"details\": \"$DETAILS\"
                }
              }"
          }

          # Function to create video entity
          create_port_entity() {
            local BLUEPRINT=$1
            local PAYLOAD=$2
            curl -s -X POST "https://api.getport.io/v1/blueprints/${BLUEPRINT}/entities" \
              -H "Authorization: Bearer $PORT_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD"
          }

          # Function to process videos
          process_videos() {
            local PAGE_TOKEN=$1
            local API_URL="https://youtube.googleapis.com/youtube/v3/playlistItems?part=contentDetails&maxResults=50&playlistId=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}"
            if [ -n "${PAGE_TOKEN}" ]; then
              API_URL="${API_URL}&pageToken=${PAGE_TOKEN}"
            fi

            add_action_log "Fetching videos from playlist..." "Fetching"
            local ITEMS_RESPONSE=$(curl -s "${API_URL}")
            
            echo "$ITEMS_RESPONSE" | jq -r '.items[].contentDetails.videoId' | while read -r VIDEO_ID; do
              add_action_log "Processing video: ${VIDEO_ID}" "Processing"
              
              VIDEO_DATA=$(curl -s "https://youtube.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=${VIDEO_ID}&key=${YOUTUBE_API_KEY}")
              
              if [ "$(echo "$VIDEO_DATA" | jq '.items | length')" -gt 0 ]; then
                local V_TITLE=$(echo "$VIDEO_DATA" | jq -r '.items[0].snippet.title')
                local V_DESC=$(echo "$VIDEO_DATA" | jq -r '.items[0].snippet.description')
                local V_THUMB=$(echo "$VIDEO_DATA" | jq -r '.items[0].snippet.thumbnails.default.url')
                local V_DURATION=$(echo "$VIDEO_DATA" | jq -r '.items[0].contentDetails.duration')
                local V_VIEWS=$(echo "$VIDEO_DATA" | jq -r '.items[0].statistics.viewCount // "0"')
                local V_LIKES=$(echo "$VIDEO_DATA" | jq -r '.items[0].statistics.likeCount // "0"')
                local V_COMMENTS=$(echo "$VIDEO_DATA" | jq -r '.items[0].statistics.commentCount // "0"')

                add_action_log "Found video: $V_TITLE" "Found"

                VIDEO_PAYLOAD=$(jq -n \
                  --arg id "$VIDEO_ID" \
                  --arg title "$V_TITLE" \
                  --arg desc "$V_DESC" \
                  --arg thumb "$V_THUMB" \
                  --arg duration "$V_DURATION" \
                  --arg views "$V_VIEWS" \
                  --arg likes "$V_LIKES" \
                  --arg comments "$V_COMMENTS" \
                  --arg playlist_id "$PLAYLIST_ID" \
                  '{
                    identifier: $id,
                    title: $title,
                    properties: {
                      title: $title,
                      description: $desc,
                      thumbnail_url: $thumb,
                      duration: $duration,
                      view_count: ($views|tonumber),
                      like_count: ($likes|tonumber),
                      comment_count: ($comments|tonumber)
                    },
                    relations: {
                      belongs_to: $playlist_id
                    }
                  }')

                RESPONSE=$(create_port_entity "video" "$VIDEO_PAYLOAD")
                if [ "$(echo "$RESPONSE" | jq -r '.ok // false')" = "true" ]; then
                  CURRENT=$(cat /tmp/videos_processed)
                  echo $((CURRENT + 1)) > /tmp/videos_processed
                  add_action_log "Successfully processed video: $V_TITLE" "Success"
                else
                  CURRENT=$(cat /tmp/videos_failed)
                  echo $((CURRENT + 1)) > /tmp/videos_failed
                  add_action_log "Failed to process video: $(echo "$RESPONSE" | jq -r '.message')" "Failed"
                fi

                PROCESSED=$(cat /tmp/videos_processed)
                FAILED=$(cat /tmp/videos_failed)
                if [ $((PROCESSED % 5)) -eq 0 ]; then
                  add_action_log "Progress: Processed ${PROCESSED} videos, ${FAILED} failed" "Progress"
                fi

                sleep 1
              else
                CURRENT=$(cat /tmp/videos_failed)
                echo $((CURRENT + 1)) > /tmp/videos_failed
                add_action_log "No data found for video: $VIDEO_ID" "Not Found"
              fi
            done

            NEXT_PAGE=$(echo "$ITEMS_RESPONSE" | jq -r '.nextPageToken // empty')
            if [ -n "$NEXT_PAGE" ]; then
              add_action_log "Fetching next page of videos..." "Next Page"
              process_videos "$NEXT_PAGE"
            fi
          }

          # Start processing
          add_action_log "Starting video processing for playlist: $PLAYLIST_TITLE" "Starting"
          process_videos ""

          # Final status update
          PROCESSED=$(cat /tmp/videos_processed)
          FAILED=$(cat /tmp/videos_failed)
          
          FINAL_DETAILS="Processed ${PROCESSED} videos, ${FAILED} failed"
          add_action_log "$FINAL_DETAILS" "Completed"
          
          if [ "$PROCESSED" -gt 0 ]; then
            update_final_status "SUCCESS" "Processing complete" "$FINAL_DETAILS"
          else
            update_final_status "FAILURE" "No videos processed" "$FINAL_DETAILS"
            exit 1
          fi

      - name: Report Failure
        if: failure()
        env:
          PORT_CONTEXT: ${{ inputs.port_context }}
        run: |
          set -e
          RUN_ID=$(echo "$PORT_CONTEXT" | jq -r --raw-input 'fromjson | .runId')
          
          curl -s -X PATCH "https://api.getport.io/v1/actions/runs/$RUN_ID" \
            -H "Authorization: Bearer $PORT_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "status": "FAILURE",
              "message": {
                "summary": "Workflow failed",
                "details": "Check logs for details"
              }
            }'