name: Ingest YouTube Playlist

on:
  workflow_dispatch:
    inputs:
      playlist_id:
        description: "Youtube video playlist id"
        required: true
      port_context:
        description: "The port context"
        type: string
        required: true

jobs:
  create-playlist:
    runs-on: ubuntu-latest
    outputs:
      playlist_title: ${{ steps.playlist_info.outputs.title }}
      playlist_count: ${{ steps.playlist_info.outputs.count }}
    steps:
      - name: Get Port Token
        id: get_token
        env:
          PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
          PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
        run: |
          set -e
          TOKEN_RESPONSE=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d "{\"clientId\": \"$PORT_CLIENT_ID\", \"clientSecret\": \"$PORT_CLIENT_SECRET\"}")
          
          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.accessToken')
          if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" = "null" ]; then
            echo "Failed to get access token"
            exit 1
          fi
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Get Playlist Info and Create Port Entity
        id: playlist_info
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          PLAYLIST_ID: ${{ github.event.inputs.playlist_id }}
          PORT_CONTEXT: ${{ inputs.port_context }}
        run: |
          set -e
          echo "Fetching playlist data"
          PLAYLIST_DATA=$(curl -s "https://youtube.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails&id=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}")
          
          if [ "$(echo $PLAYLIST_DATA | jq '.items | length')" -eq 0 ]; then
            echo "No playlist found"
            exit 1
          fi

          TITLE=$(echo $PLAYLIST_DATA | jq -r '.items[0].snippet.title')
          DESC=$(echo $PLAYLIST_DATA | jq -r '.items[0].snippet.description')
          THUMB=$(echo $PLAYLIST_DATA | jq -r '.items[0].snippet.thumbnails.default.url')
          COUNT=$(echo $PLAYLIST_DATA | jq -r '.items[0].contentDetails.itemCount')

          PLAYLIST_PAYLOAD=$(jq -n \
            --arg id "$PLAYLIST_ID" \
            --arg title "$TITLE" \
            --arg desc "$DESC" \
            --arg thumb "$THUMB" \
            --arg count "$COUNT" \
            '{
              identifier: $id,
              title: $title,
              properties: {
                title: $title,
                description: $desc,
                thumbnail_url: $thumb,
                video_count: ($count|tonumber)
              }
            }')

          echo "Creating playlist entity"
          RESPONSE=$(curl -s -X POST "https://api.getport.io/v1/blueprints/playlist/entities" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$PLAYLIST_PAYLOAD")

          if [ "$(echo "$RESPONSE" | jq -r '.ok // false')" != "true" ]; then
            echo "Failed to create playlist entity: $RESPONSE"
            exit 1
          fi

          # Save outputs
          echo "title=$(echo "$TITLE" | jq -R -s .)" >> $GITHUB_OUTPUT
          echo "count=$COUNT" >> $GITHUB_OUTPUT

  process-videos:
    needs: create-playlist
    runs-on: ubuntu-latest
    steps:
      - name: Get Port Token
        id: get_token
        env:
          PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
          PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
        run: |
          set -e
          TOKEN_RESPONSE=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d "{\"clientId\": \"$PORT_CLIENT_ID\", \"clientSecret\": \"$PORT_CLIENT_SECRET\"}")
          
          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.accessToken')
          if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" = "null" ]; then
            echo "Failed to get access token"
            exit 1
          fi
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Process Videos
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          PLAYLIST_ID: ${{ github.event.inputs.playlist_id }}
          PORT_CONTEXT: ${{ inputs.port_context }}
          PLAYLIST_TITLE: ${{ needs.create-playlist.outputs.playlist_title }}
        run: |
          set -e
          # Extract run ID
          RUN_ID=$(echo "$PORT_CONTEXT" | jq -r --raw-input 'fromjson | .runId')
          if [ -z "$RUN_ID" ]; then
            echo "Failed to get run ID from context"
            exit 1
          fi

          # Function to create video entity with error handling
          create_video_entity() {
            local PAYLOAD=$1
            local RESPONSE=$(curl -s -X POST "https://api.getport.io/v1/blueprints/video/entities" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD")
            
            if [ "$(echo "$RESPONSE" | jq -r '.ok // false')" != "true" ]; then
              echo "Failed to create video entity: $RESPONSE"
              return 1
            fi
            echo "$RESPONSE"
            return 0
          }

          # Function to update status with proper message format
          update_action_status() {
            local STATUS=$1
            local SUMMARY=$2
            local DETAILS=$3
            
            local STATUS_PAYLOAD=$(jq -n \
              --arg status "$STATUS" \
              --arg summary "$SUMMARY" \
              --arg details "$DETAILS" \
              '{
                status: $status,
                message: {
                  summary: $summary,
                  details: $details
                }
              }')

            local RESPONSE=$(curl -s -X PATCH "https://api.getport.io/v1/actions/runs/$RUN_ID" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$STATUS_PAYLOAD")
            
            if [ "$(echo "$RESPONSE" | jq -r '.ok // false')" != "true" ]; then
              echo "Failed to update status: $RESPONSE"
              return 1
            fi
            return 0
          }

          # Function to fetch video IDs
          fetch_video_ids() {
            local PAGE_TOKEN=$1
            local ITEMS_URL="https://youtube.googleapis.com/youtube/v3/playlistItems?part=contentDetails&maxResults=50&playlistId=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}"
            if [ -n "$PAGE_TOKEN" ]; then
              ITEMS_URL="${ITEMS_URL}&pageToken=${PAGE_TOKEN}"
            fi
            
            local RESPONSE=$(curl -s "$ITEMS_URL")
            echo "$RESPONSE"
          }

          # Initialize counters
          VIDEOS_PROCESSED=0
          VIDEOS_FAILED=0

          # Initial status update
          update_action_status "SUCCESS" "Starting video processing" "Initializing video import process"

          # Process videos
          echo "Starting video processing..."
          
          # Get all video IDs
          VIDEO_IDS=()
          NEXT_PAGE_TOKEN=""
          
          while true; do
            ITEMS_RESPONSE=$(fetch_video_ids "$NEXT_PAGE_TOKEN")
            
            # Add video IDs to array
            while read -r id; do
              if [ -n "$id" ]; then
                VIDEO_IDS+=("$id")
              fi
            done < <(echo "$ITEMS_RESPONSE" | jq -r '.items[].contentDetails.videoId')
            
            NEXT_PAGE_TOKEN=$(echo "$ITEMS_RESPONSE" | jq -r '.nextPageToken // empty')
            if [ -z "$NEXT_PAGE_TOKEN" ]; then
              break
            fi
          done

          # Check if we found any videos
          if [ ${#VIDEO_IDS[@]} -eq 0 ]; then
            echo "No videos found in playlist"
            update_action_status "SUCCESS" "No videos found" "Playlist contains no videos"
            exit 1
          fi

          echo "Found ${#VIDEO_IDS[@]} videos in playlist"

          # Process each video
          for VIDEO_ID in "${VIDEO_IDS[@]}"; do
            echo "Processing video: ${VIDEO_ID}"
            
            VIDEO_DATA=$(curl -s "https://youtube.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=${VIDEO_ID}&key=${YOUTUBE_API_KEY}")
            
            if [ "$(echo "$VIDEO_DATA" | jq '.items | length')" -gt 0 ]; then
              V_TITLE=$(echo "$VIDEO_DATA" | jq -r '.items[0].snippet.title')
              V_DESC=$(echo "$VIDEO_DATA" | jq -r '.items[0].snippet.description')
              V_THUMB=$(echo "$VIDEO_DATA" | jq -r '.items[0].snippet.thumbnails.default.url')
              V_DURATION=$(echo "$VIDEO_DATA" | jq -r '.items[0].contentDetails.duration')
              V_VIEWS=$(echo "$VIDEO_DATA" | jq -r '.items[0].statistics.viewCount // "0"')
              V_LIKES=$(echo "$VIDEO_DATA" | jq -r '.items[0].statistics.likeCount // "0"')
              V_COMMENTS=$(echo "$VIDEO_DATA" | jq -r '.items[0].statistics.commentCount // "0"')

              VIDEO_PAYLOAD=$(jq -n \
                --arg id "$VIDEO_ID" \
                --arg title "$V_TITLE" \
                --arg desc "$V_DESC" \
                --arg thumb "$V_THUMB" \
                --arg duration "$V_DURATION" \
                --arg views "$V_VIEWS" \
                --arg likes "$V_LIKES" \
                --arg comments "$V_COMMENTS" \
                --arg playlist_id "$PLAYLIST_ID" \
                '{
                  identifier: $id,
                  title: $title,
                  properties: {
                    title: $title,
                    description: $desc,
                    thumbnail_url: $thumb,
                    duration: $duration,
                    view_count: ($views|tonumber),
                    like_count: ($likes|tonumber),
                    comment_count: ($comments|tonumber)
                  },
                  relations: {
                    belongs_to: $playlist_id
                  }
                }')

              if create_video_entity "$VIDEO_PAYLOAD"; then
                ((VIDEOS_PROCESSED++))
                echo "Successfully processed video: $VIDEO_ID"
              else
                ((VIDEOS_FAILED++))
                echo "Failed to process video: $VIDEO_ID"
              fi

              if [ $((VIDEOS_PROCESSED % 5)) -eq 0 ]; then
                PROGRESS_SUMMARY="Processing videos"
                PROGRESS_DETAILS="Processed ${VIDEOS_PROCESSED} videos, ${VIDEOS_FAILED} failed"
                update_action_status "SUCCESS" "$PROGRESS_SUMMARY" "$PROGRESS_DETAILS" || true
              fi

              sleep 1
            else
              ((VIDEOS_FAILED++))
              echo "No data found for video: $VIDEO_ID"
            fi
          done

          # Final status update
          FINAL_SUMMARY="Processing complete"
          FINAL_DETAILS="Successfully processed ${VIDEOS_PROCESSED} videos, ${VIDEOS_FAILED} failed"
          if ! update_action_status "SUCCESS" "$FINAL_SUMMARY" "$FINAL_DETAILS"; then
            echo "Failed to update final status"
            exit 1
          fi

          echo "$FINAL_DETAILS"
          [ $VIDEOS_PROCESSED -gt 0 ]

      - name: Report Failure
        if: failure()
        env:
          PORT_CONTEXT: ${{ inputs.port_context }}
        run: |
          set -e
          RUN_ID=$(echo "$PORT_CONTEXT" | jq -r --raw-input 'fromjson | .runId')
          
          curl -s -X PATCH "https://api.getport.io/v1/actions/runs/$RUN_ID" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "status": "FAILURE",
              "message": {
                "summary": "Workflow failed",
                "details": "Check GitHub Actions logs for details"
              }
            }'