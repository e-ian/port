name: Ingest YouTube Playlist

on:
  workflow_dispatch:
    inputs:
      playlist_id:
        description: "Youtube video playlist id"
        required: true
      port_context:
        description: "The port context"
        type: string
        required: true

jobs:
  process-playlist:
    runs-on: ubuntu-latest
    steps:
      - name: Process Playlist and Videos
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          PLAYLIST_ID: ${{ github.event.inputs.playlist_id }}
          PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
          PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
          PORT_CONTEXT: ${{ inputs.port_context }}
        run: |
          # Function to get Port token
          get_port_token() {
            echo "Getting Port token..."
            local TOKEN_RESPONSE
            TOKEN_RESPONSE=$(curl -s -X POST \
              -H "Content-Type: application/json" \
              -d "{\"clientId\":\"$PORT_CLIENT_ID\",\"clientSecret\":\"$PORT_CLIENT_SECRET\"}" \
              "https://api.getport.io/v1/auth/access_token")
            
            echo "Token response: $TOKEN_RESPONSE"
            echo "$TOKEN_RESPONSE" | jq -r '.accessToken'
          }

          # Get initial token
          echo "Obtaining initial Port token..."
          PORT_TOKEN=$(get_port_token)
          if [ -z "$PORT_TOKEN" ] || [ "$PORT_TOKEN" = "null" ]; then
            echo "Failed to get initial token"
            exit 1
          fi
          echo "Token obtained successfully"

          # Function to handle Port API calls
          port_api_call() {
            local METHOD=$1
            local ENDPOINT=$2
            local DATA=$3
            local FULL_URL="https://api.getport.io/v1/$ENDPOINT"
            
            echo "Making $METHOD request to $FULL_URL"
            
            if [ -n "$DATA" ]; then
              echo "Request payload: $DATA"
              curl -v -X "$METHOD" \
                -H "Authorization: Bearer $PORT_TOKEN" \
                -H "Content-Type: application/json" \
                -d "$DATA" \
                "$FULL_URL"
            else
              curl -v -X "$METHOD" \
                -H "Authorization: Bearer $PORT_TOKEN" \
                -H "Content-Type: application/json" \
                "$FULL_URL"
            fi
          }

          # Function to update Port action status
          update_port_status() {
            local STATUS=$1
            local MESSAGE=$2
            local LOGS=$3
            
            echo "Updating Port action status to: $STATUS"
            
            # Parse port context safely
            RUN_ID=$(echo "$PORT_CONTEXT" | jq -r --raw-input 'fromjson | .runId')
            echo "Run ID: $RUN_ID"
            
            # Escape logs for JSON
            ESCAPED_LOGS=$(echo "$LOGS" | jq -R -s '.')
            
            local PAYLOAD="{\"status\":\"$STATUS\",\"message\":\"$MESSAGE\",\"logs\":$ESCAPED_LOGS}"
            port_api_call "PATCH" "actions/runs/$RUN_ID" "$PAYLOAD"
          }

          # Initialize logs variable
          LOGS=""
          
          # Function to append to logs
          append_log() {
            LOGS="${LOGS}\n$1"
            echo "$1"
          }

          # Function to create Port entity
          create_port_entity() {
            local BLUEPRINT=$1
            local PAYLOAD=$2
            echo "Creating $BLUEPRINT entity with payload: $PAYLOAD"
            port_api_call "POST" "blueprints/$BLUEPRINT/entities" "$PAYLOAD"
          }

          # Start execution
          echo "Starting execution..."
          update_port_status "RUNNING" "Started ingesting YouTube playlist" ""

          echo "Fetching playlist data..."
          PLAYLIST_DATA=$(curl -s "https://youtube.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails&id=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}")
          
          if [ "$(echo "$PLAYLIST_DATA" | jq '.items | length')" -eq 0 ]; then
            echo "No playlist found"
            update_port_status "FAILED" "No playlist found" "$LOGS"
            exit 1
          fi

          # Process playlist
          echo "Processing playlist metadata..."
          TITLE=$(echo "$PLAYLIST_DATA" | jq -r '.items[0].snippet.title')
          DESC=$(echo "$PLAYLIST_DATA" | jq -r '.items[0].snippet.description')
          THUMB=$(echo "$PLAYLIST_DATA" | jq -r '.items[0].snippet.thumbnails.default.url')
          COUNT=$(echo "$PLAYLIST_DATA" | jq -r '.items[0].contentDetails.itemCount')

          PLAYLIST_PAYLOAD=$(jq -n \
            --arg id "$PLAYLIST_ID" \
            --arg title "$TITLE" \
            --arg desc "$DESC" \
            --arg thumb "$THUMB" \
            --arg count "$COUNT" \
            '{
              identifier: $id,
              title: $title,
              properties: {
                title: $title,
                description: $desc,
                thumbnail_url: $thumb,
                video_count: ($count|tonumber)
              }
            }')

          echo "Creating playlist entity..."
          PLAYLIST_RESPONSE=$(create_port_entity "playlist" "$PLAYLIST_PAYLOAD")
          echo "Playlist creation response: $PLAYLIST_RESPONSE"
          
          if [ "$(echo "$PLAYLIST_RESPONSE" | jq -r '.ok // false')" != "true" ]; then
            echo "Failed to create playlist entity"
            update_port_status "FAILED" "Failed to create playlist entity" "$LOGS"
            exit 1
          fi

          # Initialize video counters
          VIDEOS_PROCESSED=0
          VIDEOS_FAILED=0

          # Process videos
          process_videos() {
            local PAGE_TOKEN=$1
            local API_URL="https://youtube.googleapis.com/youtube/v3/playlistItems?part=contentDetails&maxResults=50&playlistId=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}"
            if [ -n "${PAGE_TOKEN}" ]; then
              API_URL="${API_URL}&pageToken=${PAGE_TOKEN}"
            fi

            echo "Fetching videos from YouTube API..."
            local ITEMS_RESPONSE=$(curl -s "${API_URL}")
            echo "$ITEMS_RESPONSE" | jq -r '.items[].contentDetails.videoId' | while read -r VIDEO_ID; do
              echo "Processing video: ${VIDEO_ID}"
              
              VIDEO_DATA=$(curl -s "https://youtube.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=${VIDEO_ID}&key=${YOUTUBE_API_KEY}")
              
              if [ "$(echo "$VIDEO_DATA" | jq '.items | length')" -gt 0 ]; then
                local V_TITLE=$(echo "$VIDEO_DATA" | jq -r '.items[0].snippet.title')
                local V_DESC=$(echo "$VIDEO_DATA" | jq -r '.items[0].snippet.description')
                local V_THUMB=$(echo "$VIDEO_DATA" | jq -r '.items[0].snippet.thumbnails.default.url')
                local V_DURATION=$(echo "$VIDEO_DATA" | jq -r '.items[0].contentDetails.duration')
                local V_VIEWS=$(echo "$VIDEO_DATA" | jq -r '.items[0].statistics.viewCount // "0"')
                local V_LIKES=$(echo "$VIDEO_DATA" | jq -r '.items[0].statistics.likeCount // "0"')
                local V_COMMENTS=$(echo "$VIDEO_DATA" | jq -r '.items[0].statistics.commentCount // "0"')

                local VIDEO_PAYLOAD=$(jq -n \
                  --arg id "$VIDEO_ID" \
                  --arg title "$V_TITLE" \
                  --arg desc "$V_DESC" \
                  --arg thumb "$V_THUMB" \
                  --arg duration "$V_DURATION" \
                  --arg views "$V_VIEWS" \
                  --arg likes "$V_LIKES" \
                  --arg comments "$V_COMMENTS" \
                  --arg playlist_id "$PLAYLIST_ID" \
                  '{
                    identifier: $id,
                    title: $title,
                    properties: {
                      title: $title,
                      description: $desc,
                      thumbnail_url: $thumb,
                      duration: $duration,
                      view_count: ($views|tonumber),
                      like_count: ($likes|tonumber),
                      comment_count: ($comments|tonumber)
                    },
                    relations: {
                      belongs_to: $playlist_id
                    }
                  }')

                echo "Creating video entity for ${VIDEO_ID}..."
                if create_port_entity "video" "$VIDEO_PAYLOAD" | jq -e '.ok == true' > /dev/null; then
                  ((VIDEOS_PROCESSED++))
                  echo "Successfully created video entity for ${VIDEO_ID}"
                else
                  ((VIDEOS_FAILED++))
                  echo "Failed to create video entity for ${VIDEO_ID}"
                fi

                sleep 1
              else
                echo "No data found for video ${VIDEO_ID}"
                ((VIDEOS_FAILED++))
              fi

              # Update progress periodically
              if [ $((VIDEOS_PROCESSED + VIDEOS_FAILED)) -gt 0 ] && [ $((($VIDEOS_PROCESSED + $VIDEOS_FAILED) % 10)) -eq 0 ]; then
                update_port_status "RUNNING" "Processed ${VIDEOS_PROCESSED} videos, ${VIDEOS_FAILED} failed" "$LOGS"
              fi
            done

            local NEXT_PAGE=$(echo "$ITEMS_RESPONSE" | jq -r '.nextPageToken')
            if [ "${NEXT_PAGE}" != "null" ]; then
              process_videos "${NEXT_PAGE}"
            fi
          }

          echo "Starting video processing..."
          process_videos ""
          
          # Update final status
          FINAL_MESSAGE="Completed: ${VIDEOS_PROCESSED} videos processed successfully, ${VIDEOS_FAILED} failed"
          if [ $VIDEOS_PROCESSED -eq 0 ] && [ $VIDEOS_FAILED -gt 0 ]; then
            update_port_status "FAILED" "$FINAL_MESSAGE" "$LOGS"
            exit 1
          else
            update_port_status "SUCCESS" "$FINAL_MESSAGE" "$LOGS"
          fi

      - name: Report Failure
        if: failure()
        env:
          PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
          PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
          PORT_CONTEXT: ${{ inputs.port_context }}
        run: |
          # Get fresh token for failure reporting
          TOKEN_RESPONSE=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d "{\"clientId\":\"$PORT_CLIENT_ID\",\"clientSecret\":\"$PORT_CLIENT_SECRET\"}" \
            "https://api.getport.io/v1/auth/access_token")
          
          PORT_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.accessToken')
          
          if [ -n "$PORT_TOKEN" ] && [ "$PORT_TOKEN" != "null" ]; then
            RUN_ID=$(echo "$PORT_CONTEXT" | jq -r --raw-input 'fromjson | .runId')
            
            curl -s -X PATCH \
              -H "Authorization: Bearer $PORT_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{
                "status": "FAILED",
                "message": "Workflow failed to complete",
                "logs": "Check GitHub Actions logs for details"
              }' \
              "https://api.getport.io/v1/actions/runs/${RUN_ID}"
          fi